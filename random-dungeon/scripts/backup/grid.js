var gridScriptLoaded = true;// Check for scripts dependenciesif (typeof(baseClassScriptLoaded) == "undefined") { console.error("baseClass.js include is missing before grid.js include"); }if (typeof(corridorScriptLoaded)  == "undefined") { console.error("corridor.js include is missing before grid.js include"); }if (typeof(cellScriptLoaded)      == "undefined") { console.error("cell.js include is missing before grid.js include"); }if (typeof(mainScriptLoaded)      == "undefined") { console.error("main.js include is missing before grid.js include"); }// -----------------------------------------------------------------------------// Grid Class// -----------------------------------------------------------------------------class Grid extends BaseClass {	// -----------	// constructor	// -----------   constructor(width, height) {      super();      		// ---------------		// Private members		// ---------------      this.width     = width;      this.height    = height;      this.cells     = new Array();      this.corridors = new Array();      		// Initialize the grid with no cell      for (var x = 0; x < this.width; x++) {         this.cells[x] = new Array();                  for (var y = 0; y < this.height; y++) {            this.cells[x][y] = null;         }      }	  		// In case the code changed and there were initial cells, init their neighborhoods      for (var x = 0; x < this.width; x++) {         for (var y = 0; y < this.height; y++) {            if (this.cells[x][y] === null)               continue;                        this.setNeighbors(x, y);         }      }      		// ---------------		// Private methods		// ---------------      // setNeighbors      // ------------      this.setNeighbors = function(x, y) {         var cell = this.cells[x][y];                  for (var i in cell.Directions) {            var direction = cell.Directions[i];            var destinationCell = direction.DestinationCell;            direction.Border = destinationCell === null ? null : destinationCell.getDirection(direction.mult(-1)).Border;         }      }   }		// ---------	// Accessors	// ---------   // Width	// -----   get Width() { return this.width; }   // Height	// ------   get Height() { return this.height; }	// NbSeeds	// -------   get SeedsCount() {      var cells = new Array();            for (var x in this.cells)         cells = cells.concat(Enumerable.From(this.cells[x])                                 .Where(function(c) { return c !== null })                                 .ToArray());               return Enumerable.From(cells)               .Distinct(function(c) { return c.SeedNr })               .Count();   }   // CellsCount	// ----------   get CellsCount() {       return Enumerable.From(this.cells)               .Sum(function(a) { return Enumerable.From(a)                                          .Where(function(c) { return c !== null })                                          .Count() });   }   // AvailableCells	// --------------   get AvailableCells() {       var availableCells = new Array();            this.cells.forEach(function(cellsArray) {          availableCells = availableCells.concat(Enumerable.From(cellsArray)                                                   .Where(function(c) { return c !== null && c.Available })                                                   .ToArray());       });            return availableCells;    }   // EmptyCoords	// -----------   get EmptyCoords() {       var emptyCoords = new Array();            for (var x = 0; x < this.cells.length; x++)         for (var y = 0; y < this.cells[x].length; y++)            if (this.cells[x][y] === null)               emptyCoords.push(new Vector(x, y));            return emptyCoords;    }   // CardinalDirections	// ------------------   static get CardinalDirections() {      if (_cardinalDirections === null)         _cardinalDirections = [            new Vector(-1,0),            new Vector(1,0),            new Vector(0,-1),            new Vector(0,1)         ];            return _cardinalDirections;   }   	// ----------------	// Method overrides	// ----------------	// toString	// --------   toString() {      return super.toString(true, false);   }   	// --------------	// Public methods	// --------------   // containsCoord   // -------------   containsCoord(coord) {      return coord.X >= 0 && coord.Y >= 0 && coord.X < this.Width && coord.Y < this.Height;   }   	// at	// --   at(arg1, arg2) {      var ret = getXYFromMixedArgs(arg1, arg2);      var x = ret.x;      var y = ret.y;               if (x < 0 || y < 0 || x >= this.Width || y >= this.Height)         return null;               return this.cells[x][y];   }      // getAvailableDirectionsAt   // ------------------------   getAvailableDirectionsAt(pos) {      var grid = this;      return Enumerable.From(Grid.CardinalDirections)         .Where(function (d) {             return grid.containsCoord(pos.plus(d))          })         .ToArray();   }   	// getNewSeedNr	// ------------   getNewSeedNr() {      return Enumerable.From(this.cells)               .Max(function(a) { return Enumerable.From(a)                                          .Max(function(c) { return c === null ? -1 : c.SeedNr }) }) + 1;   }   	// createCellAt	// ------------   createCellAt(arg1, arg2) {      var ret = getXYFromMixedArgs(arg1, arg2);      var x = ret.x;      var y = ret.y;            if (this.cells[x][y] !== null)         throw "Cell already exists at (" + x + ", " + y + ")";               this.cells[x][y] = new Cell(x, y, this);      this.setNeighbors(x, y);            return this.cells[x][y];   }   	// createCorridor	// --------------   createCorridor(pos, dir, length, seedNr, startingBorder, endingBorder) {      var corridor = new Corridor(pos, dir, length, seedNr, startingBorder, endingBorder, this);      this.corridors.push(corridor);            return corridor;   }         // mergeSeeds   // ----------   mergeSeeds(seedNr1, seedNb2) {      var seedNrToKeep   = Math.min(seedNr1, seedNb2);      var seedNrToChange = Math.max(seedNr1, seedNb2);            for (var x in this.cells)         for (var y in this.cells[x])            if (this.cells[x][y] !== null && this.cells[x][y].SeedNr == seedNrToChange)               this.cells[x][y].SeedNr = seedNrToKeep;            return seedNrToKeep;   }   	// renderHTML	// ----------   renderHTML(cellWidth, cellHeight, fullCell) {      var render = "";            for (var x = 0; x < this.width; x++) {         for (var y = 0; y < this.height; y++) {            if (this.cells[x][y] === null)               continue;                           render = render + this.cells[x][y].renderHTML(cellWidth, cellHeight, fullCell);         }      }            return render;   }   	// renderASCII	// -----------   renderASCII() {      var ascii = "";            ascii = ascii + "\r\n" + this.renderASCIITopRuler();       for (var y = 0; y < this.height; y++) {         ascii = ascii + "\r\n" + this.renderASCIIRowTop(y);          ascii = ascii + "\r\n" + this.renderASCIIRowMiddle1(y);          ascii = ascii + "\r\n" + this.renderASCIIRowMiddle2(y);          ascii = ascii + "\r\n" + this.renderASCIIRowMiddle3(y);          ascii = ascii + "\r\n" + this.renderASCIIRowBottom(y);       }            return ascii;   }      renderASCIITopRuler() {      var ascii = "     ";            for (var x = 0; x < this.width; x++) {         ascii = ascii + (x < 100 ? "  " : " ");         ascii = ascii + x;         ascii = ascii + (x < 10 ? "  " : " ");      }            return ascii;   }   	// renderASCIIRowTop	// -----------------   renderASCIIRowTop(y) {      var ascii = "     ";            for (var x = 0; x < this.width; x++) {         var cell = this.cells[x][y];                  if (cell === null)            ascii = ascii +  "#####";         else            ascii = ascii +  cell.renderASCIITop();      }            return ascii;   }   	// renderASCIIRowMiddle1	// ---------------------   renderASCIIRowMiddle1(y) {      var ascii = "     ";            for (var x = 0; x < this.width; x++) {         var cell = this.cells[x][y];                  if (cell === null)            ascii = ascii +  "#####";         else            ascii = ascii +  cell.renderASCIIMiddle1();      }            return ascii;   }   	// renderASCIIRowMiddle2	// ---------------------   renderASCIIRowMiddle2(y) {      var ascii = "";      ascii = ascii + (y < 100 ? "  " : " ");      ascii = ascii + y;      ascii = ascii + (y < 10 ? "  " : " ");            for (var x = 0; x < this.width; x++) {         var cell = this.cells[x][y];                  if (cell === null)            ascii = ascii + "#####";         else            ascii = ascii +  cell.renderASCIIMiddle2();      }            return ascii;   }   	// renderASCIIRowMiddle3	// ---------------------   renderASCIIRowMiddle3(y) {      var ascii = "     ";            for (var x = 0; x < this.width; x++) {         var cell = this.cells[x][y];                  if (cell === null)            ascii = ascii + "#####";         else            ascii = ascii + cell.renderASCIIMiddle3();      }            return ascii;   }   	// renderASCIIRowBottom	// --------------------   renderASCIIRowBottom(y) {      var ascii = "     ";            for (var x = 0; x < this.width; x++) {         var cell = this.cells[x][y];                  if (cell === null)            ascii = ascii + "#####";         else            ascii = ascii + cell.renderASCIIBottom();      }            return ascii;   }}// -----------------// Static properties// -----------------// Cardinal Directions// -------------------_cardinalDirections = null;