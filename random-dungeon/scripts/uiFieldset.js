// -----------------------------------------------------------------------------// UIFieldset Class// -----------------------------------------------------------------------------class UIFieldset extends BaseClass {	// -----------	// constructor	// -----------   constructor(fieldSetId, contentClass) {      super();      		// ---------------		// Private members		// ---------------      this.fieldSetId   = fieldSetId;      this.contentClass = contentClass;      		// ---------------		// Private methods		// ---------------      this.init = function() {         var legend = $(`#${this.fieldSetId} legend:first`);                  legend.click(this, this.toggleVisibility);         legend.css("cursor", "pointer");      }            this.toggleVisibility = function(event) {         var uiFieldset = event.data;         var fieldSet   = $(`#${uiFieldset.FieldSetId}`);         var content    = $(`.${uiFieldset.ContentClass}:first`, fieldSet);         var width      = fieldSet.width();                  if (content.is(":visible")) {            content.slideUp();            fieldSet.width(width);         }         else {            content.slideDown();            fieldSet.css("width", "");         }      }            this.init();   }		// ---------	// Accessors	// ---------   // FieldSetId   // ------------   get FieldSetId() { return this.fieldSetId; }      // ContentClass   // ------------   get ContentClass() { return this.contentClass; }   	// ----------------	// Method overrides	// ----------------	// toString	// --------   toString(includeObjectTypes, detailArrays) {      includeObjectTypes = (typeof(includeObjectTypes) == "undefined" ? true : includeObjectTypes);      detailArrays       = (typeof(detailArrays)       == "undefined" ? true : detailArrays);            var string = `${this.constructor.name} { `;      var ownPropertyIndex = 0;            for (var propertyName in this) {         var propertyType = typeof(this[propertyName]);         if (!this.hasOwnProperty(propertyName) || propertyType == "function" || (!includeObjectTypes && propertyType == "object"))            continue;                     if (ownPropertyIndex > 0)            string = `${string}, `;                  if (Array.isArray(this[propertyName]))            string = `${string}${propertyName}: ${arrayToString(this[propertyName], detailArrays)}`;         else            string = `${string}${propertyName}: ${this[propertyName]}`;                  ownPropertyIndex++;      }            string = string + " }";            return string;   }   	// --------------	// Public methods	// --------------   }